[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "track_vacation",
    "section": "",
    "text": "title: ‚Äútrack_vacation‚Äù format: html runtime: shiny\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.5.1\n\nlibrary(DT)\n\nWarning: package 'DT' was built under R version 4.5.1\n\n\n\nAttaching package: 'DT'\n\n\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n\nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.5.1\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(readr)\nlibrary(openxlsx)\n\ndata_file &lt;- \"vacation_data.xlsx\"\n\n# UI\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      .centered-title {\n        text-align: center;\n        font-size: 40px;\n        font-weight: bold;\n        color: #ffffff;\n        background: linear-gradient(90deg, #ff4e50, #f9d423, #24fe41, #00c6ff, #ff4e50);\n        background-size: 400% 400%;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        animation: rainbow 5s ease infinite;\n        margin-bottom: 30px;\n      }\n\n      @keyframes rainbow {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    \"))\n  ),\n  \n  div(class = \"centered-title\", \"üéâ Employee Vacation Tracker üéâ\"),\n  \n  # Continue with your layout...\n  fluidRow(\n    column(width = 12, DTOutput(\"vacation_table\"))\n  ),\n  fluidRow(\n    column(\n      width = 12,\n      DTOutput(\"vacation_table\"),\n      br(),\n      \n      fluidRow(\n        column(3, uiOutput(\"employee_selector\")),\n        column(3, dateRangeInput(\"vacation_dates\", \"üìÖ Select Vacation Dates\")),\n        column(3, br(), actionButton(\"add_vacation\", \"‚ûï Add Vacation\")),\n        column(2, br(), downloadButton(\"download_csv\", \"Download CSV\"))\n      ),\n      br(),\n      \n      fluidRow(\n        column(3,  textInput(\"new_employee\", \"üÜï Add New Employee\")),\n        column(3,  selectInput(\"employee_country\", \"üåç Employee Country\", choices = c(\"India\", \"USA\", \"UK\"))),\n        column(1,  br(), actionButton(\"add_employee\", \"‚ûï  Add Employee\"))),\n      \n      br(),\n    \n      fluidRow(\n        column(3, selectInput(\"holiday_country\", \"üåç Select Country\", choices = c(\"India\", \"USA\", \"UK\"))),\n        column(3, dateInput(\"manual_holiday\", \"üìÖ Add Public Holiday\", value = Sys.Date())),\n        column(2, br(), actionButton(\"add_holiday\", \"‚ûï  Add Holiday\"))),\n      \n      br(),\n      \n  tags$ul(\n  tags$li(tags$span(style = \"background-color:white; color:red; padding:2px 6px;\",\n          HTML(\"üî¥ Weekend\"))),\n  tags$li(tags$span(style = \"background-color:white; color:blue; padding:2px 6px;\",\n          HTML(\"üîµ Public Holiday\"))),\n  tags$li(tags$span(style = \"background-color:white; color:green; padding:2px 6px;\",\n              HTML(\"‚úÖ Vacation\"))\n  )))))\n\n# Server\nserver &lt;- function(input, output, session) {\n  selected_year &lt;- reactiveVal(NULL)\n  initial_employees &lt;- reactiveVal(NULL)\n  employee_countries &lt;- reactiveVal(list())\n  vacation_data &lt;- reactiveVal(NULL)\n  last_vacation_date &lt;- reactiveVal(NULL)\n  dates &lt;- reactiveVal(NULL)\n  day_row &lt;- reactiveVal(NULL)\n  \n  holiday_list &lt;- reactiveValues(\n    India = as.Date(c(\"2025-01-01\")),\n    UK = as.Date(c(\"2025-01-01\")),\n    USA = as.Date(c(\"2025-01-01\"))\n  )\n  \n  # Load saved data or show modal\n  observe({\n    if (file.exists(data_file)) {\n      wb &lt;- loadWorkbook(data_file)\n      mat &lt;- read.xlsx(wb, sheet = \"vacation_data\", rowNames = TRUE)\n      initial_employees(rownames(mat))\n      vacation_data(as.matrix(mat))\n      \n      emp_country_df &lt;- read.xlsx(wb, sheet = \"employee_countries\", colNames = TRUE)\n      emp_country_map &lt;- setNames(as.list(emp_country_df$Country), emp_country_df$Employee)\n      employee_countries(emp_country_map)\n      \n      year_val &lt;- read.xlsx(wb, sheet = \"metadata\")$year[1]\n      selected_year(year_val)\n      \n      year_dates &lt;- seq.Date(from = as.Date(paste0(year_val, \"-01-01\")),\n                             to = as.Date(paste0(year_val, \"-12-31\")),\n                             by = \"day\")\n      dates(year_dates)\n      day_row(format(year_dates, \"%a\"))\n      last_vacation_date(min(year_dates))\n      \n      updateDateInput(session, \"manual_holiday\", min = min(year_dates), max = max(year_dates))\n    } \n    #show modal\n    else {\n      showModal(modalDialog(\n        title = \"Initialize Vacation Tracker\",\n        numericInput(\"year_input\", \"Enter Year\", value = 2025, min = 2000, max = 2100),\n        textInput(\"employee_input\", \"Enter Initial Employees (Format: Name:Country)\", value = \"Alice:UK\"),\n        footer = tagList(\n          modalButton(\"Cancel\"),\n          actionButton(\"confirm_init\", \"Confirm\")\n        )\n      ))\n    }\n  })\n  \n  observeEvent(input$confirm_init, {\n  # Set selected year\n  selected_year(input$year_input)\n\n  # Parse employee input\n  emp_entries &lt;- strsplit(input$employee_input, \",\\\\s*\")[[1]]\n  emp_names &lt;- c()\n  emp_country_map &lt;- list()\n  for (entry in emp_entries) {\n    parts &lt;- strsplit(entry, \":\")[[1]]\n    if (length(parts) == 2) {\n      emp_names &lt;- c(emp_names, parts[1])\n      emp_country_map[[parts[1]]] &lt;- parts[2]\n    }\n  }\n\n  # Store employee data\n  initial_employees(emp_names)\n  employee_countries(emp_country_map)\n\n  # Generate date sequence for the selected year\n  year_dates &lt;- seq.Date(\n    from = as.Date(paste0(input$year_input, \"-01-01\")),\n    to = as.Date(paste0(input$year_input, \"-12-31\")),\n    by = \"day\"\n  )\n  dates(year_dates)\n  day_row(format(year_dates, \"%a\"))\n  last_vacation_date(min(year_dates))\n\n  # Initialize vacation matrix\n  mat &lt;- matrix(\"\", nrow = length(emp_names), ncol = length(year_dates))\n  rownames(mat) &lt;- emp_names\n  colnames(mat) &lt;- format(year_dates, \"%d-%b\")\n\n  # Update reactive vacation data\n  vacation_data(mat)\n\n  # Update date input limits\n  updateDateInput(session, \"manual_holiday\", min = min(year_dates), max = max(year_dates))\n\n  # Trigger UI update explicitly if needed\n  output$vacation_matrix_ui &lt;- renderTable({\n    req(vacation_data())\n    vacation_data()\n  })\n\n  # Save and close modal\n  save_data()\n  removeModal()\n})\n\n  \n  employees &lt;- reactive({\n    req(initial_employees())\n    initial_employees()\n  })\n  \n  \n  observeEvent(input$add_employee, {\n    new_emp &lt;- input$new_employee\n    new_country &lt;- input$employee_country\n    \n    # Validate input\n    if (nzchar(new_emp) && !(new_emp %in% employees())) {\n      \n      # Update employee list\n      emp_list &lt;- c(employees(), new_emp)\n      initial_employees(emp_list)\n      \n      # Update country mapping\n      country_map &lt;- employee_countries()\n      country_map[[new_emp]] &lt;- new_country\n      employee_countries(country_map)\n      \n      # Add new row to vacation matrix\n      mat &lt;- vacation_data()\n      new_row &lt;- matrix(\"\", nrow = 1, ncol = ncol(mat))\n      rownames(new_row) &lt;- new_emp\n      colnames(new_row) &lt;- colnames(mat)\n      mat &lt;- rbind(mat, new_row)\n      vacation_data(mat)\n      \n      # Save updated data\n      save_data()\n      \n      # Optional: Notify user\n      showNotification(paste(\"‚úÖ Added\", new_emp, \"from\", new_country), type = \"message\")\n    } else {\n      showNotification(\"‚ö†Ô∏è Employee name is empty or already exists\", type = \"error\")\n    }\n  })\n  \n  \n  output$employee_selector &lt;- renderUI({\n    selectInput(\"employee\", \"üîΩ Select Employee\", choices = employees())\n  })\n  \n  observeEvent(input$add_vacation, {\n    start_date &lt;- input$vacation_dates[1]\n    end_date &lt;- input$vacation_dates[2]\n    \n    if (is.null(start_date) || is.null(end_date)) return()\n    if (end_date &lt; start_date) {\n      showNotification(\"End date cannot be before start date.\", type = \"error\")\n      return()\n    }\n    \n    emp &lt;- input$employee\n    dates_seq &lt;- seq.Date(start_date, end_date, by = \"day\")\n    cols &lt;- format(dates_seq, \"%d-%b\")\n    mat &lt;- vacation_data()\n    for (col in cols) {\n      if (col %in% colnames(mat)) {\n        mat[emp, col] &lt;- \"‚úÖ\"\n      }\n    }\n    vacation_data(mat)\n    last_vacation_date(max(end_date, last_vacation_date()))\n    save_data()\n  })\n  \n  observe({\n    updateDateRangeInput(session, \"vacation_dates\",\n                         start = Sys.Date(),\n                         end = Sys.Date() + 1)\n  })\n  \n  observeEvent(input$add_holiday, {\n    req(input$holiday_country, input$manual_holiday)\n    \n    country &lt;- input$holiday_country\n    new_date &lt;- input$manual_holiday\n    current &lt;- holiday_list[[country]]\n    \n    if (!(new_date %in% current)) {\n      holiday_list[[country]] &lt;- sort(unique(c(current, new_date)))\n      save_data()\n      showNotification(paste(\"üîµ Holiday added for\", country, \"on\", format(new_date, \"%d-%b-%Y\")), type = \"message\")\n    } else {\n      showNotification(\"‚ö†Ô∏è Holiday already exists for this date\", type = \"warning\")\n    }\n  })\n  \n  output$vacation_table &lt;- renderDT({\n    req(vacation_data(), dates(), day_row())\n    \n    mat &lt;- vacation_data()\n    df &lt;- rbind(Day = day_row(), mat)\n    \n    weekend_flags &lt;- weekdays(dates()) %in% c(\"Saturday\", \"Sunday\")\n    date_cols &lt;- format(dates(), \"%d-%b\")\n    \n    # Apply weekend and holiday flags\n    for (i in seq_along(date_cols)) {\n      col &lt;- date_cols[i]\n      if (weekend_flags[i]) {\n        df[\"Day\", col] &lt;- \"üî¥\"\n      }\n      for (employee in rownames(mat)) {\n        emp_country &lt;- employee_countries()[[employee]]\n        if (!is.null(emp_country) && dates()[i] %in% holiday_list[[emp_country]]) {\n          df[employee, col] &lt;- \"üîµ\"\n        }\n      }\n    }\n    \n    # ‚úÖ Enable cell editing here\n    datatable(\n      df,\n      editable = list(target = \"cell\"),\n      options = list(\n        scrollX = TRUE,\n        pageLength = 20,\n        dom = 't',\n        fixedColumns = list(leftColumns = 1)\n      ),\n      escape = FALSE,\n      rownames = TRUE,\n      class = 'cell-border stripe'\n    ) %&gt;%\n      formatStyle(\n        columns = colnames(df)[weekend_flags],\n        backgroundColor = \"red\",\n        color = \"white\"\n      )\n  })\n  \nobserveEvent(input$vacation_table_cell_edit, {\n  info &lt;- input$vacation_table_cell_edit\n  mat &lt;- vacation_data()\n\n  # Adjust for the extra \"Day\" row at the top\n  if (info$row &gt; 1) {\n    row_name &lt;- rownames(mat)[info$row - 1]\n    col_name &lt;- colnames(mat)[info$col + 1]  # +1 because rownames are shown\n    value &lt;- trimws(info$value)\n\n    # ‚úÖ Only allow ‚úÖ or blank\n    if (value %in% c(\"‚úÖ\", \"\")) {\n      mat[row_name, col_name] &lt;- value\n      vacation_data(mat)\n      save_data()\n    } else {\n      # Revert invalid input\n      showNotification(\"Only ‚úÖ or blank is allowed.\", type = \"error\")\n      proxy &lt;- dataTableProxy(\"vacation_table\")\n      replaceData(proxy, rbind(Day = day_row(), mat), resetPaging = FALSE)\n    }\n  }\n})\n\n  output$download_csv &lt;- downloadHandler(\n    filename = function() {\n      paste(\"vacation_tracker_\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      mat &lt;- vacation_data()\n      write_csv(as.data.frame(mat), file)\n    }\n  )\n  \n  save_data &lt;- function() {\n    wb &lt;- createWorkbook()\n    \n    # Prepare vacation matrix with holidays and weekends\n    mat &lt;- vacation_data()\n    date_cols &lt;- format(dates(), \"%d-%b\")\n    weekend_flags &lt;- weekdays(dates()) %in% c(\"Saturday\", \"Sunday\")\n    \n    for (i in seq_along(date_cols)) {\n      col &lt;- date_cols[i]\n      \n      # Mark weekends\n      if (weekend_flags[i]) {\n        for (emp in rownames(mat)) {\n          if (mat[emp, col] == \"\") mat[emp, col] &lt;- \"üî¥\"\n        }\n      }\n      \n      # Mark public holidays based on employee country\n      for (emp in rownames(mat)) {\n        emp_country &lt;- employee_countries()[[emp]]\n        if (!is.null(emp_country) && dates()[i] %in% holiday_list[[emp_country]]) {\n          if (mat[emp, col] == \"\") mat[emp, col] &lt;- \"üîµ\"\n        }\n      }\n    }\n    \n    # Sheet 1: Vacation Data\n    addWorksheet(wb, \"vacation_data\")\n    writeData(wb, \"vacation_data\", as.data.frame(mat), rowNames = TRUE)\n    \n    # Sheet 2: Employee Countries\n    addWorksheet(wb, \"employee_countries\")\n    emp_country_df &lt;- data.frame(Employee = names(employee_countries()), Country = unlist(employee_countries()))\n    writeData(wb, \"employee_countries\", emp_country_df)\n    \n    # Sheet 3: Metadata\n    addWorksheet(wb, \"metadata\")\n    writeData(wb, \"metadata\", data.frame(year = selected_year()))\n    \n    # Sheet 4: Public Holidays\n    addWorksheet(wb, \"public_holidays\")\n    holiday_df &lt;- do.call(rbind, lapply(names(holiday_list), function(country) {\n      data.frame(Country = country, Date = holiday_list[[country]])\n    }))\n    writeData(wb, \"public_holidays\", holiday_df)\n    \n    # Sheet 5: Weekends\n    addWorksheet(wb, \"weekends\")\n    weekend_df &lt;- data.frame(Date = dates()[weekdays(dates()) %in% c(\"Saturday\", \"Sunday\")])\n    writeData(wb, \"weekends\", weekend_df)\n    \n    # Save workbook\n    saveWorkbook(wb, data_file, overwrite = TRUE)\n  }\n  \n}\n\n# Run the app\nshinyApp(ui, server)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]